import { getRepository } from 'typeorm';
import { User } from '../models/User';
import { Rewardable } from '../models/experience';
import { RadiantQuest } from '../models/RadiantQuest';
import { right } from 'fp-ts/lib/Either';
import { getCourierLevel, getTradeLevel } from './ExperienceService';

export class UserService {
    static async applyRewards(userId: string | number, reward: Rewardable) {
        const user = await getRepository(User).findOneOrFail(userId);
        await getRepository(User).update(userId, {
            exp: user.exp + reward.exp,
            courierExp: user.courierExp + reward.courierExp,
            battleExp: user.battleExp + reward.battleExp,
            tradeExp: user.tradeExp + reward.tradeExp,
            money: user.money + reward.money,
        });
    }

    static async currentLocationStatus(userId: string | number) {
        const user = await getRepository(User).findOneOrFail(userId, { relations: ['location'] });

        const result = `–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è: <b>${user.location.name}</b>\n`;
        return result;
    }

    static async currentStatus(userId: string | number) {
        const user = await getRepository(User).findOneOrFail(userId);

        const courierRating = getCourierLevel(user);
        const tradeRating = getTradeLevel(user);

        let result = '';
        result += `üíé <b>${user.money}</b> –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤\n`;
        result += `<b>${user.exp}</b> –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞\n`;
        result += `üì¶ <b>${courierRating.value}</b> –ö—É—Ä—å–µ—Ä—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (${courierRating.current} / ${courierRating.next}, ${courierRating.percentage}%)\n`;
        result += `üìà <b>${tradeRating.value}</b> –¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (${tradeRating.current} / ${tradeRating.next}, ${tradeRating.percentage}%)\n`;
        result += `<b>${user.battleExp}</b> –æ—á–∫–æ–≤ –±–æ–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞\n`;

        return result;
    }
}
